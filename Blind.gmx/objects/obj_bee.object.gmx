<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_flyingl</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 30 steps = 1 segundo
PlayerObject = obj_character // objecto do jogador
StepsToNextAttack = 20      // ataca a cada 20 steps
ViewRadius = 100            // raio de visao para detectar o jogador
NoiseRadius = 200           // raio a que pode ser ouvido pelo jogador
VelocityX_Angry = 3         // velocidade horizontal (zangado)
VelocityX_Calm = 2          // velocidade horizontal (calmo)
VelocityY_Angry = 5         // velocidade vertical (zangado)
VelocityY_Calm = 1          // velocidade vertical (calmo)
SoundGain_Impact = 1.0      // multiplicador de volume para o som de impacto
SoundGain_Buzz = 1.0        // multiplicador de volume para o som do zumbido
MaxX = x + 160              // limite horizontal direito
MinX = x - 160              // limite horizontal esquerdo
MaxY = y - 15               // limite vertical superior
MinY = y - 5                // limite vertical inferior
y = y - 10                  // actualizacao da posicao vertical inicial
isPlayerNearby = false      // se o jogador esta perto
isMovingRight = true        // se o jogador esta a ir para a direita
isMovingUp = true           // se o jogador esta a ir para cima
stepsToNextAttack = 0       // steps para o proximo ataque

emitter_impact = audio_emitter_create()
emitter_buzz = audio_emitter_create()
audio_emitter_gain(emitter_impact,0.0)
audio_emitter_gain(emitter_buzz,0.0)
audio_emitter_falloff(emitter_buzz,100,100,5)

audio_play_sound_on(emitter_buzz,snd_bee_buzz1,true,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(distance_to_object(PlayerObject)&lt;ViewRadius) { isPlayerNearby = true } 
else { isPlayerNearby = false }

if(distance_to_object(PlayerObject)&lt;NoiseRadius) { 
    audio_emitter_gain(emitter_buzz,SoundGain_Buzz)
    audio_emitter_gain(emitter_impact,SoundGain_Impact)
}
else {
    audio_emitter_gain(emitter_buzz,0)
    audio_emitter_gain(emitter_impact,0)
}

if(isMovingRight) { sprite_index = spr_flyingr }
else { sprite_index = spr_flyingl }

audio_emitter_position(emitter_buzz,PlayerObject.x-x,PlayerObject.y-y,0)
audio_emitter_position(emitter_impact,PlayerObject.x-x,PlayerObject.y-y,0)

if(isPlayerNearby) {
    if(PlayerObject.x&gt;x) {
        if(abs(PlayerObject.x-x)&lt;3) { x = PlayerObject.x } 
        else { x += VelocityX_Angry }
    } else {
        if(abs(PlayerObject.x-x)&lt;3) { x = PlayerObject.x }
        else { x -= VelocityX_Angry }
    }
    if(x&gt;MaxX) { x = MaxX }
    if(x&lt;MinX) { x = MinX }
    if(isMovingUp) {
        if(y&gt;MaxY) { y -= VelocityY_Angry }
        else { isMovingUp = false }
    } else {
        if(y&lt;MinY &amp;&amp; x==PlayerObject.x) { 
            if(stepsToNextAttack==0) { y += VelocityY_Angry }
            else { stepsToNextAttack -= 1 }
        } else {
            if(x==PlayerObject.x) { audio_play_sound_on(emitter_impact,snd_impact1,false,1) }
            isMovingUp = true
            stepsToNextAttack = StepsToNextAttack
        }
    }
} else {
    if(isMovingRight) {
        if(x&lt;MaxX) { x += VelocityX_Calm } 
        else { isMovingRight = false }
    } else {
        if(x&gt;MinX) { x -= VelocityX_Calm } 
        else { isMovingRight = true }
    }
    if(isMovingUp) {
        if(y&gt;MaxY) { y -= VelocityY_Calm }
        else { isMovingUp = false }
    } else {
        if(y&lt;MinY) { y += VelocityY_Calm }
        else { isMovingUp = true }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object12">
      <action>
        <libid>1</libid>
        <id>543</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>65280</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0.65</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
