<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_monsterl</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>543</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>65280</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0.65</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PlayerObject = obj_character// objecto do jogador
ViewRadius = 100            // raio de visao para detectar o jogador
VerticalPerception = 20     // capacidade de detectar o jogador verticalmente
NoiseRadius = 200           // raio a que pode ser ouvido pelo jogador
VelocityX_Angry = 3         // velocidade horizontal (zangado)
VelocityX_Calm = 2          // velocidade horizontal (calmo)
StepsToNextAttack = 20      // ataca a cada X steps
StepsToNextSound = 50       // faz um som a cada X steps
SoundGain_Impact = 1.0      // multiplicador de volume para o som de impact
SoundGain_Bark = 1.0        // multiplicador de volume para o som do bark
SoundGain_Roar = 1.0        // multiplicador de volume para o som do roar
visible = false             // invisivel ate ser pintado
stepsToNextAttack = StepsToNextAttack
stepsToNextSound = StepsToNextSound
isPlayerNearby = false      // se o jogador esta perto
isMovingRight = true        // se o monstro esta a ir para a direita
isPainted = false           // se ja tiver sido pintado

emitter_impact = audio_emitter_create()
emitter_bark = audio_emitter_create()
emitter_roar = audio_emitter_create()
audio_emitter_gain(emitter_impact,0.0)
audio_emitter_gain(emitter_bark,0.0)
audio_emitter_gain(emitter_roar,0.0)
audio_emitter_falloff(emitter_bark,100,100,5)
audio_emitter_falloff(emitter_roar,100,100,5)

//footprints = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>distanceToPlayer = distance_to_object(PlayerObject)
audio_emitter_position(emitter_impact,PlayerObject.x-x,PlayerObject.y-y,0)
audio_emitter_position(emitter_bark,PlayerObject.x-x,PlayerObject.y-y,0)
audio_emitter_position(emitter_roar,PlayerObject.x-x,PlayerObject.y-y,0)

if(distanceToPlayer&lt;ViewRadius &amp;&amp; abs(PlayerObject.y-y)&lt;VerticalPerception) { 
    if(!isPlayerNearby) { // se no step passado nao detectava o jogador e agora detecta
        switch(floor(random(2))) {
            case 0: audio_play_sound_on(emitter_bark,snd_monster2_bark1,false,1) break
            case 1: audio_play_sound_on(emitter_bark,snd_monster2_bark2,false,1) break
        }
        stepsToNextSound = StepsToNextSound
    }
    isPlayerNearby = true 
} else { isPlayerNearby = false }

if(isMovingRight) { sprite_index = spr_monsterr }
else { sprite_index = spr_monsterl }

if(distanceToPlayer&lt;NoiseRadius) { 
    audio_emitter_gain(emitter_impact,SoundGain_Impact)
    audio_emitter_gain(emitter_bark,SoundGain_Bark)
    audio_emitter_gain(emitter_roar,SoundGain_Roar)
} else {
    audio_emitter_gain(emitter_impact,0)
    audio_emitter_gain(emitter_bark,0)
    audio_emitter_gain(emitter_roar,0)
}

if(stepsToNextSound==0) {
    if(isPlayerNearby) {
        switch(floor(random(2))) {
            case 0: audio_play_sound_on(emitter_bark,snd_monster2_bark1,false,1) break
            case 1: audio_play_sound_on(emitter_bark,snd_monster2_bark2,false,1) break
        }
    } else {
        switch(floor(random(2))) {
            case 0: audio_play_sound_on(emitter_roar,snd_monster2_roar4,false,1) break
            case 1: audio_play_sound_on(emitter_roar,snd_monster2_roar5,false,1) break
        }
    }
    stepsToNextSound = StepsToNextSound
} else { stepsToNextSound -= 1 }

if(isPainted) {
    visible = true
} else {
    if(place_meeting(x, y, obj_circle)) { visible = true }
    else { visible = false }
}

if(isPlayerNearby) {
    if(abs(PlayerObject.x-x)&lt;VelocityX_Angry) { x = PlayerObject.x } //se estiver ao alcance do jogador
    else if(PlayerObject.x&gt;x) { //se estiver a direita do jogador (fora do alcance)
        x += VelocityX_Angry
        isMovingRight = true
    } else { //se estiver a esquerda do jogador (fora do alcance)
        x -= VelocityX_Angry
        isMovingRight = false
    }
    if(x==PlayerObject.x) {
        if(stepsToNextAttack==0) {
            audio_play_sound_on(emitter_impact,snd_impact1,false,1)
            PlayerObject.health -= 50
            stepsToNextAttack = StepsToNextAttack
        } else { stepsToNextAttack -= 1 }
    }
} else {
    if(isMovingRight) { x += VelocityX_Calm }
    else { x -= VelocityX_Calm }
}

/*
if (footprints == false) {
    for (i = 1; i &lt; 10; i++) {
        temp = instance_position(x-16, y+i*8, obj_test)
        if (temp.image_alpha &gt; 0.5) footprints = true
    }
}

if (footprints == true) {
    for (i = 1; i &lt; 10; i++) {
        temp = instance_position(x-16, y+i*8, obj_test)
        temp.image_alpha += 0.01
        temp = instance_position(x+16, y+i*8, obj_test)
        temp.image_alpha += 0.01
    }
    temp = instance_position(x, y+28, obj_test);
    temp.image_alpha += 0.5;
    show_debug_message("X distance: " +  string(x))
    show_debug_message("Y distance: " +  string(y))
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_test">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isMovingRight = !isMovingRight
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isPainted = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
