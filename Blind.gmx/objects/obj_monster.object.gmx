<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_monsterl</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 30 steps = 1 segundo
PlayerObject = obj_character
StepsToNextAttack = 20
StepsToNextSound_Angry = 45
StepsToNextSound_Calm = 90
ViewRadius = 150
VerticalPerception = 20
NoiseRadius = 200
VelocityX_Calm = 2
VelocityX_Angry = 3
SoundGain_Bark = 0.5
SoundGain_Roar = 1.0
SoundGain_Impact = 1.0
MaxX = x + 155
MinX = x - 155
isPlayerNearby = false
isMovingRight = true
stepsToNextSound = 0
stepsToNextAttack = 0

emitter_bark = audio_emitter_create()
emitter_roar = audio_emitter_create()
emitter_impact = audio_emitter_create()
audio_emitter_gain(emitter_bark,0.0)
audio_emitter_gain(emitter_roar,0.0)
audio_emitter_gain(emitter_impact,0.0)
audio_emitter_falloff(emitter_bark,100,100,5)
audio_emitter_falloff(emitter_roar,100,100,5)
audio_emitter_falloff(emitter_impact,100,100,5)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// distance to player
distanceToPlayer = distance_to_object(PlayerObject)
if(distanceToPlayer&lt;ViewRadius &amp;&amp; abs(PlayerObject.y-y)&lt;VerticalPerception) { isPlayerNearby = true }
else { isPlayerNearby = false }

if(distanceToPlayer&lt;NoiseRadius) {
    audio_emitter_gain(emitter_roar,SoundGain_Roar)
    audio_emitter_gain(emitter_bark,SoundGain_Bark)
    audio_emitter_gain(emitter_impact,SoundGain_Impact)
} else {
    audio_emitter_gain(emitter_roar,0.0)
    audio_emitter_gain(emitter_bark,0.0)
    audio_emitter_gain(emitter_impact,0.0)
}

audio_emitter_position(emitter_roar,PlayerObject.x-x,PlayerObject.y-y,0)
audio_emitter_position(emitter_bark,PlayerObject.x-x,PlayerObject.y-y,0)
audio_emitter_position(emitter_impact,PlayerObject.x-x,PlayerObject.y-y,0)

// sprites
if(isMovingRight) { sprite_index = spr_monsterr }
else { sprite_index = spr_monsterl }

// sound
if(stepsToNextSound &lt;= 0) {
    if(isPlayerNearby) {
        audio_emitter_position(emitter_bark,PlayerObject.x-x,PlayerObject.y-y,0)
        stepsToNextSound = StepsToNextSound_Angry
        switch(floor(random(2))) {
            case 0: audio_play_sound_on(emitter_bark,snd_monster2_bark1,false,1)
            case 1: audio_play_sound_on(emitter_bark,snd_monster2_bark2,false,1)
        }
    } else {
        audio_emitter_position(emitter_roar,PlayerObject.x-x,PlayerObject.y-y,0)
        stepsToNextSound = StepsToNextSound_Calm
        switch(floor(random(2))) {
            case 0: audio_play_sound_on(emitter_roar,snd_monster2_roar1,false,1)
            case 1: audio_play_sound_on(emitter_roar,snd_monster2_roar2,false,1)
        }
    }
} else { stepsToNextSound -= 1 }

// movement
if(isPlayerNearby) {
    if(abs(PlayerObject.x-x)&lt;= VelocityX_Angry) { 
        x = PlayerObject.x
        if(stepsToNextAttack == 0) {
            audio_play_sound_on(emitter_impact,snd_impact1,false,1)
            PlayerObject.vidas -= 2
            stepsToNextAttack = StepsToNextAttack
        } else { stepsToNextAttack -= 1 } 
    } else if(PlayerObject.x&gt;x) {
        x += VelocityX_Angry 
        isMovingRight = true
    }
    else {
        x -= VelocityX_Angry
        isMovingRight = false
    }
    if(x&gt;MaxX) { x = MaxX }
    if(x&lt;MinX) { x = MinX }
} else {
    if(isMovingRight) {
        if(x&lt;MaxX) { x += VelocityX_Calm } 
        else { isMovingRight = false }
    } else {
        if(x&gt;MinX) { x -= VelocityX_Calm } 
        else { isMovingRight = true }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object12">
      <action>
        <libid>1</libid>
        <id>543</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>65280</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0.65</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
